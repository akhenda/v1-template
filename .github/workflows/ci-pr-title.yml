name: Validate PR Title

on: workflow_call

permissions:
  pull-requests: read

jobs:
  main:
    name: PR Title
    runs-on: ubuntu-latest
    steps:
      - name: ⁉️ Run semantic pull request action
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Configure which types are allowed (newline-delimited).
          # ref: CONTRIBUTING.md
          types: |
            [Feature]
            [Fix]
            [HotFix]
            [Docs]
            [Release]
            [Deps]
            [Tests]
            [Chore]
            [CI]
            [Refactor]
            [Revert]
            [Build]
            [Other]
          # Configure that a scope must always be provided.
          requireScope: false
          # Configure which scopes are disallowed in PR titles.
          # These are regex patterns auto-wrapped in `^ $`.
          #
          # We disable the following scopes:
          # - `release` because we have the `release` type
          # - UPPERCASE titles because we promote the use of lowercase
          disallowScopes: |
            release
            [A-Z_-]+
          # If the PR contains one of these newline-delimited labels, the
          # validation is skipped. If you want to rerun the validation when
          # labels change, you might want to use the `labeled` and `unlabeled`
          # event triggers in your workflow.
          ignoreLabels: |
            bot
            dependencies
            ignore-semantic-pull-request
          # If you're using a format for the PR title that differs from the traditional Conventional
          # Commits spec, you can use these options to customize the parsing of the type, scope and
          # subject. The `headerPattern` should contain a regex where the capturing groups in parentheses
          # correspond to the parts listed in `headerPatternCorrespondence`.
          # See: https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#headerpattern
          headerPattern: '^(\[\w*\])(?:\(([\w$.\-*\/ ]*)\))?: (.*)$'
          headerPatternCorrespondence: type, scope, subject
